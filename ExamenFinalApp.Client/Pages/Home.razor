@page "/"
@using ExamenFinalApp.Shared.Models
@inject HttpClient Http

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<div class="container mt-4">
    <h2 class="text-center mb-4">📚 Gestión de Libros</h2>


    @if (!string.IsNullOrWhiteSpace(mensaje))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @mensaje
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Cerrar"></button>
        </div>
    }

    @if (cargando)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card mb-4">
            <div class="card-header">@((editando ? "✏️ Editar Libro" : "➕ Agregar Libro"))</div>
            <div class="card-body">
                <EditForm Model="@modelo" OnValidSubmit="Guardar" FormName="libro-form">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row g-3">
                        <div class="col-md-6">
                            <InputText class="form-control" @bind-Value="modelo.Titulo" placeholder="Título del Libro" />
                        </div>
                        <div class="col-md-6">
                            <InputText class="form-control" @bind-Value="modelo.Autor" placeholder="Autor" />
                        </div>
                        <div class="col-md-4">
                            <InputNumber class="form-control" @bind-Value="modelo.Paginas" placeholder="N° de páginas" />
                        </div>
                        <div class="col-md-4">
                            <InputDate class="form-control" @bind-Value="modelo.FechaPublicacion" />
                        </div>
                        <div class="col-12 text-end">
                            <button type="submit" class="btn btn-success">@((editando ? "💾 Actualizar" : "📥 Guardar"))</button>
                            @if (editando)
                            {
                                <button type="button" class="btn btn-secondary ms-2" @onclick="Cancelar">❌ Cancelar</button>
                            }
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>

        <h4 class="mb-3">📖 Libros en la Biblioteca</h4>
        <table class="table table-hover table-bordered table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Título</th>
                    <th>Autor</th>
                    <th>Páginas</th>
                    <th>Fecha Publicación</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var libro in libros)
                {
                    <tr>
                        <td>@libro.Titulo</td>
                        <td>@libro.Autor</td>
                        <td>@libro.Paginas</td>
                        <td>@libro.FechaPublicacion.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-1" @onclick="() => Editar(libro)">✏️</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(libro.Id)">🗑️</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <a href="#" class="btn btn-primary rounded-circle position-fixed bottom-0 end-0 m-4" title="Subir">
        ⬆️
    </a>
</div>

<style>
    a[href="#"] {
        width: 48px;
        height: 48px;
        font-size: 1.2rem;
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

@code {
    string url = "https://localhost:5001";
    List<Libro> libros = new();
    Libro modelo = new();
    bool editando = false;
    string mensaje = string.Empty;
    bool cargando = true;

    protected override async Task OnInitializedAsync()
    {
        cargando = true;
        await ObtenerLibros();
        cargando = false;
    }

    async Task ObtenerLibros()
    {
        libros = await Http.GetFromJsonAsync<List<Libro>>($"{url}/api/Libro");
    }

    async Task Guardar()
    {
        HttpResponseMessage response;

        if (editando)
        {
            response = await Http.PutAsJsonAsync($"{url}/api/Libro/{modelo.Id}", modelo);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Libro actualizado correctamente.";
                modelo = new();
                editando = false;
                await ObtenerLibros();
            }
            else
            {
                mensaje = "❌ Error al actualizar.";
            }
        }
        else
        {
            response = await Http.PostAsJsonAsync($"{url}/api/Libro", modelo);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "✅ Libro agregado correctamente.";
                modelo = new();
                editando = false;
                await ObtenerLibros();
            }
            else
            {
                mensaje = "❌ Error al guardar.";
            }
        }
    }

    void Editar(Libro libro)
    {
        modelo = new Libro
            {
                Id = libro.Id,
                Titulo = libro.Titulo,
                Autor = libro.Autor,
                Paginas = libro.Paginas,
                FechaPublicacion = libro.FechaPublicacion
            };
        editando = true;
        mensaje = string.Empty;
    }

    async Task Eliminar(int id)
    {
        var response = await Http.DeleteAsync($"{url}/api/Libro/{id}");
        mensaje = response.IsSuccessStatusCode ? "🗑️ Libro eliminado." : "❌ No se pudo eliminar.";
        await ObtenerLibros();
    }

    void Cancelar()
    {
        modelo = new();
        editando = false;
        mensaje = string.Empty;
    }
}
